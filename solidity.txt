pragma solidity >=0.7.0 <0.9.0;

contract VendingMachine{
    address public owner;
    mapping (address => uint) public donutQty;
    uint public price;

    constructor(){
        owner = msg.sender;
        donutQty[address(this)] = 100;
        price=2 ether;
    }

    function getVendingMachineBalance() public view returns (uint){
        return donutQty[address(this)];
    }

    function restock(uint amount) public{
        require(msg.sender==owner, "Only the owner can restock the machine");
        donutQty[address(this)]+=amount;
    }

    function purchase (uint qty) public payable{
        require(msg.value >= qty * price, "You should pay atleast 2 Ethers per donut");
        require(donutQty[address(this)]>= qty, "Not enough donuts in the stock");
        donutQty[address(this)]-=qty;
        donutQty[msg.sender]+=qty;
    }

    function changePrice( uint change ) public{
        require(msg.sender==owner, "Only the owner can change the price");
        price=change ;
    }
}